(defun integral (func a b step)
  ; Определение функции integral с четырьмя параметрами: func - интегрируемая функция,
  ; a - начало интервала, b - конец интервала, step - шаг интегрирования.
  (labels ((trap-integrate (a b h sum)
             ; label определяет локальную функцию trap-integrate с четырьмя параметрами:
             ; a - левый конец текущего интервала, b - правый конец текущего интервала,
             ; h - шаг, sum - текущая сумма интеграла.                           
             (if (> a b)
                 sum
                 ; Если левый конец текущего интервала превышает правый, то интегрирование завершено,
                 ; и возвращается текущая сумма.
                 (trap-integrate (+ a h) b h (+ sum (* (funcall func a) h))))         
           )) ; хвостовая рекурсия
                 ; Иначе, рекурсивно вызываем trap-integrate с обновленными параметрами:
                 ; a + h - левый конец следующего интервала,
                 ; b - правый конец следующего интервала,
                 ; h - тот же шаг,
                 ; sum + (значение функции func в точке a * h) - обновленная сумма интеграла.
                 ; Таким образом, мы добавляем площадь текущей трапеции к сумме.
    (trap-integrate a b step 0)))
    ; Вызываем внутреннюю функцию trap-integrate с начальными параметрами:
    ; a - начало интервала,
    ; b - конец интервала,
    ; step - шаг интегрирования,
    ; 0 - начальная сумма интеграла.

(defun myfunc (x)
  (* x x))

(format t "Результат интегрирования: ~a~%" (integral #'myfunc 0 1 0.0001))
